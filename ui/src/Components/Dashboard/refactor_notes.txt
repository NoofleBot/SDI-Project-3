import React, { useState, useEffect } from 'react';
import './Dashboard.css';

const API_BASE = 'http://localhost:5173'; // Update if using proxy

function Div_Dashboard() {
  const [soldiers, setSoldiers] = useState([]);
  const [filterCategory, setFilterCategory] = useState('');
  const [filterValue, setFilterValue] = useState('');
  const [offset, setOffset] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const LIMIT = 250;

  const fetchSoldiers = async () => {
    try {
      setIsLoading(true);
      const res = await fetch(`${API_BASE}/soldiers?limit=${LIMIT}&offset=${offset}`);
      const data = await res.json();
      setSoldiers(data);
    } catch (err) {
      console.error('Failed to fetch soldiers:', err);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchSoldiers();
  }, [offset]);

  const handleFilterCategoryChange = (category) => {
    setFilterCategory(category);
    setFilterValue('');
  };

  const filteredSoldiers = soldiers.filter((soldier) => {
    if (!filterCategory || !filterValue) return true;

    const searchTerm = filterValue.toLowerCase();

    switch (filterCategory) {
      case 'first name':
        return soldier.first_name.toLowerCase().includes(searchTerm);
      case 'last name':
        return soldier.last_name.toLowerCase().includes(searchTerm);
      case 'deployments':
        return soldier.id_deployments?.some(dep =>
          dep.toLowerCase().includes(searchTerm)
        );
      case 'mos':
        return (soldier.id_mos?.toString().toLowerCase() || '').includes(searchTerm);
      default:
        return true;
    }
  });

  return (
    <div>
      <h2>Soldier Status</h2>

      <div className="filter-section">
        <h3>Filter by:</h3>
        <select
          className="filter-dropdown"
          value={filterCategory}
          onChange={(e) => handleFilterCategoryChange(e.target.value)}
        >
          <option value="">Select a filter</option>
          <option value="first name">First Name</option>
          <option value="last name">Last Name</option>
          <option value="deployments">Deployment</option>
          <option value="mos">MOS</option>
        </select>
      </div>

      {filterCategory && (
        <div className="filter-input-group">
          <input
            type="text"
            placeholder={`Enter ${filterCategory} to filter`}
            value={filterValue}
            onChange={(e) => setFilterValue(e.target.value)}
          />
          <button onClick={() => { setFilterCategory(''); setFilterValue(''); }}>
            Clear Filter
          </button>
        </div>
      )}

      <div className="results-container">
        {isLoading ? (
          <p>Loading soldiers...</p>
        ) : (
          <table>
            <thead>
              <tr>
                <th>Last Name</th>
                <th>First Name</th>
                <th>Deployment</th>
                <th>MOS</th>
              </tr>
            </thead>
            <tbody>
              {filteredSoldiers.map((soldier, index) => (
                <tr key={index}>
                  <td>{soldier.last_name}</td>
                  <td>{soldier.first_name}</td>
                  <td>{soldier.id_deployments?.join(', ')}</td>
                  <td>{soldier.id_mos?.join(', ')}</td>
                </tr>
              ))}
            </tbody>
          </table>
        )}

        <div className="pagination">
          <button
            disabled={offset === 0}
            onClick={() => setOffset(Math.max(offset - LIMIT, 0))}
          >
            Previous
          </button>
          <span>Showing {offset + 1} â€“ {offset + soldiers.length}</span>
          <button
            disabled={soldiers.length < LIMIT}
            onClick={() => setOffset(offset + LIMIT)}
          >
            Next
          </button>
        </div>
      </div>
    </div>
  );
}

export default Div_Dashboard;






Make sure your backend /soldiers route supports limit and offset query params like this:

// Example Express route in server/src/soldiers.js
router.get('/', async (req, res) => {
  const limit = parseInt(req.query.limit) || 250;
  const offset = parseInt(req.query.offset) || 0;

  try {
    const soldiers = await knex('soldiers')
      .limit(limit)
      .offset(offset);
    res.json(soldiers);
  } catch (error) {
    console.error('Error fetching soldiers:', error);
    res.status(500).json({ error: 'Failed to retrieve soldiers' });
  }
});
